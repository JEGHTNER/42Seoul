/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   lst_test.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jehelee <jehelee@student.42.kr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/11/24 15:24:33 by jehelee           #+#    #+#             */
/*   Updated: 2022/11/26 19:41:48 by jehelee          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int	ft_lstsize(t_list *lst)
{
	t_list	*tmp;
	int		count;

	tmp = lst;
	count = 0;
	while (tmp)
	{
		tmp = tmp->next;
		count++;
	}
	return (count);
}

t_list	*ft_lstnew(void *content)
{
	t_list	*new_node;

	new_node = malloc(sizeof(t_list));
	if (!new_node)
		return (0);
	new_node -> content = content;
	new_node ->next = 0;
	return (new_node);
}

void	ft_lstadd_front(t_list **lst, t_list *new)
{
	if (!new)
		return ;
	new ->next = (*lst);
	*lst = new;
}

t_list	*ft_lstlast(t_list *lst)
{
	t_list	*tmp;

	if (!lst)
		return (0);
	tmp = lst;
	while (tmp -> next)
	{
		tmp = tmp->next;
	}
	return (tmp);
}

void	ft_lstadd_back(t_list **lst, t_list *new)
{
	t_list	*last;

	if (!(*lst))
	{
		*lst = new;
		return ;
	}
	last = ft_lstlast(*lst);
	last -> next = new;
}

void    print_list(t_list **obj)
{
    int i = 0;

	if (!(*obj))
	{
		printf("list is empty!\n");
		return ;
	}
    t_list *tmp = *obj;
    while (tmp)
    {
     	printf("[%d] [%p] : %s\n", i++, tmp, (char *)(tmp->content));
		tmp = tmp->next;
    }
	printf("\n");
}


void    del(void *content)
{
    *(char *)content = 0;
}

void	f(void *content)
{
	char	c;
	char	*address;
	c = 'c';
	address = (char *)content;
	int i = 0;
	while (address[i])
	{
		address[i] = c;
		i++;
	}
}

void	*fu(void *content)
{
	char	c;
	char	*address;
	c = 'd';
	address = (char *)content;
	int i = 0;
	while (address[i])
	{
		address[i] = c;
		i++;
	}
	return (address);
}
	

void	ft_lstdelone(t_list *lst, void (*del)(void*))
{
	if (!lst)
		return ;
	del(lst -> content);
    printf("[%p[] del \n",lst);
	free (lst);
}

void	ft_lstclear(t_list **lst, void (*del)(void*))
{
	t_list	*tmp;
	t_list	*current;

	if (!(*lst))
		return ;
	current = (*lst);
	while (current)
	{
		tmp = current;
		current = current -> next;
		ft_lstdelone(tmp, del);
	}
	*lst = NULL;
}

void	ft_lstiter(t_list *lst, void (*f)(void *))
{
	t_list	*tmp;

	if (!lst || !f)
		return ;
	tmp = lst;
	while (tmp)
	{
		f(tmp->content);
		tmp = tmp->next;
	}
}

t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))
{
	t_list	*tmp;
	t_list	*new_node;
	t_list	*new_head;
	void	*ptr;

	if (!lst || !f || !del)
		return (NULL);
	tmp = lst;
	new_head = NULL;
	while (tmp)
	{
		ptr = f(tmp -> content);
		new_node = ft_lstnew(ptr);
		if (!(new_node))
		{
			ft_lstclear(&new_head, del);
			del(ptr);
			return (NULL);
		}
		ft_lstadd_back(&new_head, new_node);
		tmp = tmp->next;
	}
	new_node = NULL;
	return (new_head);
}

#include <stdio.h>
int main()
{
    printf("\n");
    printf("***********ft_list***********\n");
    t_list **obj;
    t_list  *last;
    t_list  *del_test;
	t_list	*new_list;
    obj = malloc(sizeof(t_list));
    char a = 'a';
    char b = 'b';
	char a1 = 'f';
    char *str = strdup("HELLO");
    int c = '0';
    int d = '1';
    ft_lstadd_front(obj,ft_lstnew(&a));
	print_list(obj);
    ft_lstadd_front(obj,ft_lstnew(&b));
	print_list(obj);
	ft_lstadd_front(obj,ft_lstnew(&a1));
	print_list(obj);
	ft_lstadd_back(obj,ft_lstnew(str));
	print_list(obj);
    ft_lstadd_back(obj,ft_lstnew(&c));
	print_list(obj);
    ft_lstadd_back(obj,ft_lstnew(&d));
    print_list(obj);
	ft_lstiter(*obj,f);
	print_list(obj);
    t_list *tmp = *obj;
    last = ft_lstlast(*obj);
	printf("last : [%p]\n",last);
	new_list = ft_lstmap(*obj,&fu,del);
	printf("new_lst : \n");
	print_list(&new_list);
	//printf("clear obj\n");
    //ft_lstclear(obj,del);
    //print_list(obj);
	//ft_lstclear(&new_list,del);
	//printf("clear new_lst\n");
	//print_list(&new_list);
}
